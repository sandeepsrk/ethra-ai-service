name: Deploy Ethra AI

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - closed
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ethra-ai

    env:
      GO_VERSION: "1.22.6"
      APP_NAME: "ethra-ai-service"
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      TARGET_DIR: ${{ secrets.TARGET_DIR }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      PORT: ${{ vars.PORT }}
      OPENAI_API_KEY: ${{ vars.OPENAI_API_KEY }}
      OPENAI_MODEL: ${{ vars.OPENAI_MODEL }}
      OPENAI_TIMEOUT: ${{ vars.OPENAI_TIMEOUT }}

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # 3. Cache dependencies
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 4. Install dependencies
      - name: Install dependencies
        run: go mod tidy

      # 5. Build binary
      - name: Build binary
        run: go build -o ${{ env.APP_NAME }} ./cmd/server

      # 6. Create .env file at runtime
      - name: Create .env file
        run: |
          echo "PORT=${{ env.PORT }}" >> .env
          echo "OPENAI_API_KEY=${{ env.OPENAI_API_KEY }}" >> .env
          echo "OPENAI_MODEL=${{ env.OPENAI_MODEL }}" >> .env
          echo "OPENAI_TIMEOUT=${{ env.OPENAI_TIMEOUT }}" >> .env
          echo "âœ… .env file created:"
          cat .env

      # 7. Deploy to server
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            echo "ðŸ”¹ Stopping old app if running..."
            pkill -f ${{ env.APP_NAME }} || true

            echo "ðŸ”¹ Uploading files..."
            scp -o StrictHostKeyChecking=no ${{ env.APP_NAME }} .env ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.TARGET_DIR }}

            echo "ðŸ”¹ Starting app..."
            nohup ${{ env.TARGET_DIR }}/${{ env.APP_NAME }} > ${{ env.TARGET_DIR }}/app.log 2>&1 &
            echo "âœ… Deployment complete."
